---
import { Icon } from "astro-icon";

export interface Props {
  page: string;
}

const { page } = Astro.props;
---

<header>
  <article>
    <!-- Logo -->
    <a href="/">
      <img alt="Logo La Fée des Cailloux" src="/img/logo.webp" />
      <img alt="La Fée des Cailloux" src="/svg/logo-title.svg" />
    </a>

    <!-- Navigation -->
    <nav>
      <!-- Show links button for mobile -->
	<Icon name="charm:menu-hamburger" id="bars" />

      <!-- Links -->
      <section id="nav-section">
        <a href="/" class:list={["", { current: page == "home" }]}>Accueil</a>
        <a
          id="realisations"
          class:list={["", { current: page == "realisations" }]}
        >
          Mes réalisations
          <Icon name="ic:round-arrow-drop-down" />
        </a>
        <a
          href="/entretenir-ses-pierres"
          class:list={["", { current: page == "entretenir-ses-pierres" }]}
        >
          Entretenir ses pierres
        </a>
        <a href="/contact" class:list={["", { current: page == "contact" }]}>
          Me contacter
        </a>
      </section>

      <!-- Realisations -->
      <section id="realisations-section">
        <a id="close_realisations">
          <Icon name="ic:round-arrow-drop-down" />
        </a>
        <a
          href="/realisations/chemins-de-vie"
          class:list={["", { current: page == "chemins-de-vie" }]}
        >
          Chemins de vie
        </a>
        <a
          href="/realisations/bracelets-therapeutiques"
          class:list={["", { current: page == "bracelets-therapeutiques" }]}
        >
          Bracelets thérapeutiques
        </a>
        <a
          href="/realisations/pendules"
          class:list={["", { current: page == "pendules" }]}
        >
          Pendules
        </a>
        <a
          href="/realisations/pendentifs-et-colliers"
          class:list={["", { current: page == "pendentifs-et-colliers" }]}
        >
          Pendentifs et colliers
        </a>
        <a
          href="/realisations/druses-et-geodes"
          class:list={["", { current: page == "druses-et-geodes" }]}
        >
          Druses et Géodes
        </a>
        <a
          href="/realisations/pierres-roulees"
          class:list={["", { current: page == "pierres-roulees" }]}
        >
          Pierres roulées
        </a>
      </section>
    </nav>
  </article>
</header>

<!-- Go to top button -->
<a id="scroll_btn">
  <Icon name="uil:top-arrow-to-top" />
</a>

<script>
  let showNav = false;
  let showRealisations = false;
  let header = document.getElementsByTagName("header")[0];
  let scrollBtn = document.getElementById("scroll_btn");

  document.getElementById("bars")!.addEventListener("click", () => {
    if (!showNav && !showRealisations) {
      toggleNav(true);
    } else {
      toggleNav(false);
      toggleRealisations(false);
    }
  });
  document
    .getElementById("nav-section")!
    .addEventListener("mouseleave", () => toggleNav(false));
  document.getElementById("realisations")!.addEventListener("click", () => {
    toggleRealisations(!showRealisations);
    toggleNav(false);
  });
  document
    .getElementById("realisations-section")!
    .addEventListener("mouseleave", () => toggleRealisations(false));
  document
    .getElementById("close_realisations")!
    .addEventListener("click", () => {
      toggleRealisations(false);
      toggleNav(true);
    });
  document
    .getElementById("scroll_btn")!
    .addEventListener("click", () =>
      window.scrollTo({ top: 0, behavior: "smooth" })
    );

  document.addEventListener("scroll", () => {
    toggleNav(false);
    toggleRealisations(false);
    if (document.documentElement.scrollTop > 6) {
      header!.classList.add("scroll");
    } else {
      header!.classList.remove("scroll");
    }

    if (document.documentElement.scrollTop > 550) {
      scrollBtn!.classList.add("scroll");
    } else {
      scrollBtn!.classList.remove("scroll");
    }
  });

  function toggleNav(bool: boolean) {
    showNav = bool;
    _toggleElement("nav-section", bool);
  }

  function toggleRealisations(bool: boolean) {
    showRealisations = bool;
    _toggleElement("realisations-section", bool);
  }

  function _toggleElement(id: string, bool: boolean) {
    let element = document.getElementById(id);
    if (bool) {
      element!.classList.add("show");
    } else {
      element!.classList.remove("show");
    }
  }
</script>

<style lang="scss">
  header {
    transition: all 300ms;
    z-index: 99;
    height: 90px;
    position: fixed;
    right: 0;
    left: 0;
    background-color: rgba(255, 255, 255, 0.8);
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(var(--blur));

    > article {
      width: min(100% - 3rem, 100%);
      max-width: 2100px;
      margin-inline: auto;
      height: inherit;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 2rem;

      > a {
        display: flex;
        align-items: center;
        gap: 1.3rem;

        img {
          transition: all 300ms;
          height: 68px;

          &:last-of-type {
            height: 50px;

            @media (max-width: 560px) {
              display: none;
            }
          }
        }
      }

      > nav {
        > svg {
          transition: all 300ms;
          display: block;
          padding: 1rem;
          width: 70px;
          height: 70px;
          cursor: pointer;
        }

        > section {
          transition: all 300ms;
          transform: translateX(110%);
          box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
          background-color: rgba(255, 255, 255, 0.96);
          backdrop-filter: blur(var(--blur));
          position: absolute;
          top: 100%;
          right: 0;
          height: calc(100vh - 90px);
          display: flex;
          flex-flow: column nowrap;
          align-items: center;
          overflow-y: auto;
          overflow-x: hidden;

          &.show {
            transition: all 300ms;
            transform: translateX(0);

            a {
              animation: dropdown-link-appear 300ms;
              animation-fill-mode: both;

              @for $i from 1 through 7 {
                &:nth-child(#{$i}n) {
                  animation-delay: #{$i * 30 + 50}ms;
                }
              }

              @keyframes dropdown-link-appear {
                from {
                  transform: translateX(30px);
                }
                to {
                  transform: translateX(0);
                }
              }
            }
          }

          a {
            transition: all 300ms;
            padding: 1.6rem;
            text-align: center;
            text-decoration: none;
            color: var(--global-text-color);
            position: relative;
            cursor: pointer;

            &::after {
              transition: all 300ms;
              content: "";
              position: absolute;
              top: 80%;
              left: 1.6rem;
              right: 100%;
              height: 1px;
              border-radius: var(--border-radius);
              background-color: var(--global-text-color);
            }

            &:hover::after {
              right: 1.6rem;
            }

            &.current::after {
              left: 1.6rem;
              right: 1.6rem;
            }
          }

          #realisations {
            display: inline-flex;
			align-items: center;

			svg {
				width: 30px;
			}

            @media (max-width: 1159px) {
              svg {
                transform: rotate(-90deg);
              }
            }
          }

          #close_realisations {
			display: inline-flex;
			align-items: center;

			svg {
				width: 30px;
				transform: rotate(90deg);
			}

            &::after {
              content: unset;
            }
          }
        }
      }

      @media (min-width: 1160px) {
        > nav {
          > svg {
            display: none;
          }

          > section {
            transition: font-size 300ms;
            transform: translateX(0);
            box-shadow: none;
            background-color: transparent;
            backdrop-filter: none;
            position: relative;
            top: 0;
            right: 0;
            height: max-content !important;
            flex-direction: row;

            &:last-of-type {
              transition: all 300ms;
              position: absolute;
              top: 90%;
              right: 358px;
              flex-direction: column;
              background-color: #e5e5e5;
              border-radius: calc(var(--border-radius) / 2);
              padding: 0.8rem;
              pointer-events: none;
              box-shadow: rgba(0, 0, 0, 0) 0 0 0 0, rgba(0, 0, 0, 0) 0 0 0 0,
                rgba(0, 0, 0, 0.25) 0 25px 50px -12px;
              transform: translateY(-2%);
              opacity: 0;

              > a {
                padding: 0.5em;

                &::after {
                  content: none;
                }

                &.current {
                  font-weight: bold;
                }
              }

              &.show {
                opacity: 1;
                transform: translateY(0);
                pointer-events: auto;

                a {
                  animation: dropdown-link-appear 150ms;
                  animation-fill-mode: both;

                  @for $i from 1 through 7 {
                    &:nth-child(#{$i}n) {
                      animation-delay: #{$i * 30}ms;
                    }
                  }

                  @keyframes dropdown-link-appear {
                    from {
                      transform: translateX(-10px);
                      opacity: 0;
                    }
                    to {
                      transform: translateX(0);
                      opacity: 1;
                    }
                  }
                }
              }
            }

            #close_realisations {
              display: none;
            }
          }
        }
      }
    }
  }

  .scroll {
    transition: all 300ms;
    height: 60px;

    > article {
      img {
        height: 44px;

        &:last-of-type {
          height: 34px;
        }
      }

      > nav {
        > svg {
			height: 60px;
          	padding: 0.9em;
        }

        > section {
          height: calc(100vh - 60px);

          @media (min-width: 1159px) {
            &:first-of-type {
              a {
                padding: 1rem 1.2rem;

                &::after {
                  left: 1.2rem;
                }

                &:hover::after {
                  right: 1.2rem;
                }

                &.current::after {
                  left: 1.2rem;
                  right: 1.2rem;
                }
              }
            }

            &:last-of-type {
              right: 330px;
            }
          }
        }
      }
    }
  }

  #scroll_btn {
    transition: all 500ms ease-in-out;
    opacity: 0;
    user-focus: none;
    pointer-events: none;
    cursor: default;
    border-radius: var(--border-radius);
    width: 56px;
    height: 56px;
    z-index: 98;
    position: fixed;
    bottom: 1.6rem;
    right: 1.6rem;
    padding: 0;
    margin: 0;
    overflow: hidden;
    background-color: var(--secondary-bg-color);
    box-shadow: 0 2px 16px rgba(0, 0, 0, 0.16);
    backdrop-filter: blur(var(--blur));

    svg {
      transform: scale(0.6);
    }

    @media (min-width: 500px) {
      bottom: 2.5rem;
      right: 2.5rem;
    }

    &.scroll {
      opacity: 1;
      user-focus: auto;
      pointer-events: auto;
      cursor: pointer;
    }
  }
</style>
